{"remainingRequest":"/Users/admin/web/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/web/app/src/views/Chats.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/web/app/src/views/Chats.vue","mtime":1632906478686},{"path":"/Users/admin/web/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/web/app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/admin/web/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/web/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCiAgaW1wb3J0IENoYXRXaW5kb3cgZnJvbSAndnVlLWFkdmFuY2VkLWNoYXQnCiAgaW1wb3J0ICd2dWUtYWR2YW5jZWQtY2hhdC9kaXN0L3Z1ZS1hZHZhbmNlZC1jaGF0LmNzcycKICBpbXBvcnQgZmlyZWJhc2UgZnJvbSAiZmlyZWJhc2UiCgogIGV4cG9ydCBkZWZhdWx0IHsKCW1ldGhvZHM6ewoJCWFzeW5jIGZldGNoTWVzc2FnZXMoe3Jvb20sIG9wdGlvbnM9e319KXsKCQkJdGhpcy5tZXNzYWdlcyA9IFtdCgkJCXRoaXMubWVzc2FnZXNMb2FkZWQgPSBmYWxzZQoJCQl2YXIgaW5mbyA9IHJvb20ucm9vbUlkCgkJCXRoaXMuY3VycmVudFJvb21JZCA9IGluZm8KCQkJY29uc29sZS5sb2coImJ1bGxzaGl0IikKCQkJCgkJCXZhciBtZXNzYWdlcyA9IGZpcmViYXNlLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oIm1lc3NhZ2VzIikuZG9jKHRoaXMuY3VycmVudFJvb21JZCkuY29sbGVjdGlvbigibWVzc2FnZXMiKQoKCQkJbWVzc2FnZXMud2hlcmUoInNlbmRlcklkIiwgIiE9IiwgdGhpcy4kc3RvcmUuc3RhdGUudXNlci5pZCkud2hlcmUoInNlZW4iLCAiPT0iLCBmYWxzZSkuZ2V0KCkudGhlbigoZG9jU25hcHNob3QpID0+IHsKCQkJCWNvbnNvbGUubG9nKCdvdXRzaWRlIGxvb3AnKQoJCQkJZG9jU25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7CgkJCQkJY29uc29sZS5sb2coJ2luc2lkZSBsb29wJykKCQkJCQljb25zb2xlLmxvZyhkb2MuZGF0YSgpLnNlZW4pCgkJCQkJY29uc29sZS5sb2coZG9jLmRhdGEoKS51c2VybmFtZSkKCQkJCQljb25zb2xlLmxvZyhkb2MuZGF0YSgpLmNvbnRlbnQpCgkJCQkJbWVzc2FnZXMuZG9jKGRvYy5pZCkudXBkYXRlKHsKCQkJCQkJc2Vlbjp0cnVlCgkJCQkJCX0pCgkJCQl9KQoJCQl9KQoJCQkKCQkJbWVzc2FnZXMub3JkZXJCeSgidGltZXN0YW1wIikuZ2V0KCkudGhlbigoZG9jU25hcHNob3QpID0+IHsKCQkJCWRvY1NuYXBzaG90LmZvckVhY2goKG1lc3NhZ2UpID0+IHsKCQkJCXRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlLmRhdGEoKSkKCgkJCQljb25zb2xlLmxvZyhtZXNzYWdlLmRhdGEoKS5jb250ZW50KQoJCQl9KQoJCQl0aGlzLm1lc3NhZ2VzTG9hZGVkID0gdHJ1ZQoJCQl9KQoJCX0sCgoJCWFzeW5jIHNlbmRNZXNzYWdlKHJvb21JZCwgY29udGVudCwgZmlsZXMsIHJlcGx5TWVzc2FnZSwgdXNlcnNUYWcpewoJCQkJLyoKCQkJCSovCgoJCQkJdmFyIGluZm8gPSByb29tSWQKCQkJCQoJCQkJdmFyIG1lc3NhZ2VUZW1wbGF0ZSA9CgkJCQkJewoJCQkJCV9pZDogaW5mby5yb29tSWQsCgkJCQkJY29udGVudDogaW5mby5jb250ZW50LAoJCQkJCXNlbmRlcklkOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmlkLAoJCQkJCXVzZXJuYW1lOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLm5hbWUsCgkJCQkJdGltZXN0YW1wOiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKSwKCQkJCQlzYXZlZDogdHJ1ZSwKCQkJCQlkaXN0cmlidXRlZDogdHJ1ZSwKCQkJCQlzZWVuOiBmYWxzZSwgCgkJCQkJfQoKCQkJCXZhciBmaWxlVGVtcGxhdGUgPSAKCQkJCQl7CgkJCQkJCW5hbWU6ICJFeGFtcGxlIiwKCQkJCQkJc2l6ZTogMCwKCQkJCQkJdHlwZTogJ3BuZycsCgkJCQkJCWF1ZGlvOiBmYWxzZSwgCgkJCQkJCWR1cmF0aW9uOiAwLCAKCQkJCQkJdXJsOiAnZXguY29tJywKCQkJCQkJcHJldmlldzogJ2V4LmNvbScKCQkJCQl9CQoKCgkJCQljb25zb2xlLmxvZygiWW91ciBtZXNzYWdlIGlzOiIpCgkJCQlpZihyZXBseU1lc3NhZ2UgPT0gbnVsbCl7CgkJCQkJCXZhciByZXF1ZXN0ID0gYXdhaXQgZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbignbWVzc2FnZXMnKS5kb2MoaW5mby5yb29tSWQpLmNvbGxlY3Rpb24oJ21lc3NhZ2VzJykuZG9jKCkuc2V0KG1lc3NhZ2VUZW1wbGF0ZSkKCQkJCQkJdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2VUZW1wbGF0ZSkKCQkJCX1lbHNlewoJCQkJCXZhciByZXBseVRlbXBsYXRlID0gCgkJCQkJewoJCQkJCQljb250ZW50OiByZXBseU1lc3NhZ2UuY29udGVudCwKCQkJCQkJc2VuZGVySWQ6IHJlcGx5TWVzc2FnZS5zZW5kZXJJZCwKCQkJCQl9CgkJCQkJaWYocmVwbHlNZXNzYWdlLmZpbGVzLmxlbmd0aCA+IDApewoKCQkJCQl9CgkJCQl9CgkJCX0KCX0sCglhc3luYyBiZWZvcmVNb3VudCgpewoJCWNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuaWQpCgkJdGhpcy5jdXJyZW50VXNlcklkID0gdGhpcy4kc3RvcmUuc3RhdGUudXNlci5pZAoJCQoJCXZhciBjaGF0X3Jvb21zID0gYXdhaXQgZmlyZWJhc2UuZmlyZXN0b3JlKCkKCQkuY29sbGVjdGlvbignY2hhdHMnKQoJCS53aGVyZSgidXNlcnMiLCAiYXJyYXktY29udGFpbnMiLCB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmlkKQoJCS5nZXQoKQoJCQoJCWNoYXRfcm9vbXMuZm9yRWFjaCgoZG9jKSA9PiB7CgkJCXZhciByb29tVGVtcGxhdGUgPSAKCQkJCQl7CgkJCQkJcm9vbUlkOiBudWxsLAoJCQkJCXJvb21OYW1lOiAnUm9vbSAxJywKCQkJCQlsYXN0TWVzc2FnZTogewoJCQkJCWNvbnRlbnQ6ICdMYXN0IG1lc3NhZ2UgcmVjZWl2ZWQnLAoJCQkJCXNlbmRlcklkOiAxMjM0LAoJCQkJCXVzZXJuYW1lOiAnSm9obiBEb2UnLAoJCQkJCXRpbWVzdGFtcDogbnVsbCwKCQkJCQl9LAoJCQkJCXVzZXJzOiBbCgkJCQkJewoJCQkJCQlfaWQ6IDEyMzQsCgkJCQkJCXVzZXJuYW1lOiAnSm9obiBEb2UnLAoJCQkJCQlzdGF0dXM6IHsKCQkJCQkJc3RhdGU6ICdvZmZsaW5lJywKCQkJCQkJbGFzdENoYW5nZWQ6ICd0b2RheSwgMTQ6MzAnCgkJCQkJCX0KCQkJCQl9LAoJCQkJCXsKCQkJCQkJX2lkOiA0MzIxLAoJCQkJCQl1c2VybmFtZTogJ0pvaG4gU25vdycsCgkJCQkJCXN0YXR1czogewoJCQkJCQlzdGF0ZTogJ29mZmxpbmUnLAoJCQkJCQlsYXN0Q2hhbmdlZDogJzE0IEp1bHksIDIwOjAwJwoJCQkJCQl9CgkJCQkJfQoJCQkJCV0KIAkJCQl9CQoJCQkKCQkJZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbignbWVzc2FnZXMnKS5kb2MoZG9jLmlkKQoJCQkuY29sbGVjdGlvbignbWVzc2FnZXMnKQoJCQkub3JkZXJCeSgndGltZXN0YW1wJywgJ2Rlc2MnKQoJCQkubGltaXQoMSkKCQkJLmdldCgpLnRoZW4oKGluZm8pID0+IHsKCQkJCWluZm8uZm9yRWFjaCgocmVzcG9uc2UpID0+IHsKCQkJCXJvb21UZW1wbGF0ZS5sYXN0TWVzc2FnZS5jb250ZW50ID0gcmVzcG9uc2UuZGF0YSgpLmNvbnRlbnQKCQkJCXJvb21UZW1wbGF0ZS5sYXN0TWVzc2FnZS5zZW5kZXJJZCA9IHJlc3BvbnNlLmRhdGEoKS5zZW5kZXJJZAoJCQkJcm9vbVRlbXBsYXRlLmxhc3RNZXNzYWdlLnVzZXJuYW1lID0gcmVzcG9uc2UuZGF0YSgpLnVzZXJuYW1lCgkJCQl2YXIgd29yZGx5VGltZXN0YW1wID0gcmVzcG9uc2UuZGF0YSgpLnRpbWVzdGFtcAoJCQkJcm9vbVRlbXBsYXRlLmxhc3RNZXNzYWdlLnRpbWVzdGFtcCA9IHdvcmRseVRpbWVzdGFtcAoJCQkJfSkKCQkJfSkKCgkJCWlmKGRvYy5kYXRhKCkuZmlyc3RVc2VyLm5hbWUgPT09IHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIubmFtZSl7CgkJCQlyb29tVGVtcGxhdGUucm9vbUlkID0gZG9jLmlkCgkJCQlyb29tVGVtcGxhdGUudGltZXN0YW1wID0gZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCkKCQkJCXJvb21UZW1wbGF0ZS5yb29tTmFtZSA9IGRvYy5kYXRhKCkuc2Vjb25kVXNlci5uYW1lCgkJCQlyb29tVGVtcGxhdGUudXNlcnNbMF0uX2lkID0gZG9jLmRhdGEoKS5zZWNvbmRVc2VyLmlkCgkJCQlyb29tVGVtcGxhdGUudXNlcnNbMF0udXNlcm5hbWUgPSBkb2MuZGF0YSgpLnNlY29uZFVzZXIubmFtZQoJCQkJZmlyZWJhc2UuZmlyZXN0b3JlKCkKCQkJCS5jb2xsZWN0aW9uKCd1c2VycycpCgkJCQkuZG9jKGRvYy5kYXRhKCkuc2Vjb25kVXNlci5pZCkKCQkJCS5nZXQoKS50aGVuKChmaXJlX3N0YXRlKSA9PiB7CgkJCQkJaWYoZmlyZV9zdGF0ZS5kYXRhKCkub25saW5lID09ICd0cnVlJyl7CgkJCQkJcm9vbVRlbXBsYXRlLnVzZXJzWzBdLnN0YXR1cy5zdGF0ZSA9ICdvbmxpbmUnCgkJCQkJfWVsc2V7CgkJCQkJcm9vbVRlbXBsYXRlLnVzZXJzWzBdLnN0YXR1cy5zdGF0ZSA9ICdvZmZsaW5lJwoJCQkJCX0KCQkJCQlyb29tVGVtcGxhdGUudXNlcnNbMF0uc3RhdHVzLmxhc3RDaGFuZ2VkID0gZmlyZV9zdGF0ZS5kYXRhKCkubGFzdENoYW5nZWQKCQkJCX0pCgkJCQlyb29tVGVtcGxhdGUudXNlcm5hbWUgPSBkb2MuZGF0YSgpLnNlY29uZFVzZXIubmFtZQoJCQl9CgkJCWVsc2V7CgkJCQlyb29tVGVtcGxhdGUucm9vbUlkID0gZG9jLmlkCgkJCQlyb29tVGVtcGxhdGUudGltZXN0YW1wID0gZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCkKCQkJCXJvb21UZW1wbGF0ZS5yb29tTmFtZSA9IGRvYy5kYXRhKCkuZmlyc3RVc2VyLm5hbWUKCQkJCXJvb21UZW1wbGF0ZS51c2Vyc1sxXS5faWQgPSBkb2MuZGF0YSgpLmZpcnN0VXNlci5pZCAKCQkJCXJvb21UZW1wbGF0ZS51c2Vyc1sxXS51c2VybmFtZSA9IGRvYy5kYXRhKCkuZmlyc3RVc2VyLm5hbWUKCQkJCWZpcmViYXNlLmZpcmVzdG9yZSgpCgkJCQkuY29sbGVjdGlvbigndXNlcnMnKQoJCQkJLmRvYyhkb2MuZGF0YSgpLmZpcnN0VXNlci5pZCkKCQkJCS5nZXQoKS50aGVuKChmaXJlX3N0YXRlKSA9PiB7CgkJCQkJaWYoZmlyZV9zdGF0ZS5kYXRhKCkub25saW5lID09ICd0cnVlJyl7CgkJCQkJcm9vbVRlbXBsYXRlLnVzZXJzWzFdLnN0YXR1cy5zdGF0ZSA9ICdvbmxpbmUnCgkJCQkJfWVsc2V7CgkJCQkJcm9vbVRlbXBsYXRlLnVzZXJzWzFdLnN0YXR1cy5zdGF0ZSA9ICdvZmZsaW5lJwoJCQkJCX0KCQkJCQlyb29tVGVtcGxhdGUudXNlcnNbMV0uc3RhdHVzLmxhc3RDaGFuZ2VkID0gZmlyZV9zdGF0ZS5kYXRhKCkubGFzdENoYW5nZWQKCQkJCX0pCgkJCQlyb29tVGVtcGxhdGUudXNlcm5hbWUgPSBkb2MuZGF0YSgpLmZpcnN0VXNlci5uYW1lCgkJCX0KCQkJdGhpcy5yb29tcy5wdXNoKHJvb21UZW1wbGF0ZSkKCQl9KQoKCQl0aGlzLnJvb21zTG9hZGVkID0gdHJ1ZQoJfSwKCWNyZWF0ZWQgKCkgewoKCX0sCiAgICBkYXRhOiAoKSA9PiAoewogICAgICBjYXJkczogWydUb2RheScsICdZZXN0ZXJkYXknXSwKCSAgcm9vbXNMb2FkZWQ6IGZhbHNlLAoJICBtZXNzYWdlc0xvYWRlZDogdHJ1ZSwKICAgICAgZHJhd2VyOiBudWxsLAogICAgICBjdXJyZW50VXNlcklkOiBudWxsLAoJICBjdXJyZW50Um9vbUlkOiBudWxsLAoJICBoZWlnaHQ6ICcxMDAlJywKCSAgcm9vbXM6IFtdLAoJICBtZXNzYWdlczpbXSwKICAgICAgbGlua3M6IFsKICAgICAgICBbJ21kaS1pbmJveC1hcnJvdy1kb3duJywgJ0luYm94J10sCiAgICAgICAgWydtZGktc2VuZCcsICdTZW5kJ10sCiAgICAgICAgWydtZGktZGVsZXRlJywgJ1RyYXNoJ10sCiAgICAgICAgWydtZGktYWxlcnQtb2N0YWdvbicsICdTcGFtJ10sCiAgICAgIF0sCiAgICB9KSwKCWNvbXBvbmVudHM6IHsKICAgICAgQ2hhdFdpbmRvdwogICAgfQogIH0KCg=="},{"version":3,"sources":["Chats.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chats.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\t\t<v-card fill-height\n\t\theight=\"100%\"\n\t\tapp>\n<chat-window :currentUserId=\"currentUserId\" \n\t\t\t :height=\"height\"\n\t\t\t :rooms=\"rooms\" \n\t\t\t :messages=\"messages\"\n\t\t\t :messagesLoaded=\"messagesLoaded\"\n\t\t\t :roomsLoaded=\"roomsLoaded\"\n\t\t\t :show-new-messages-divider=\"false\"\n\t\t\t @send-message=\"sendMessage\"\n\t\t\t @fetch-messages=\"fetchMessages\"/>\n\t\t</v-card>\n</template>\n\n<script>\n  import ChatWindow from 'vue-advanced-chat'\n  import 'vue-advanced-chat/dist/vue-advanced-chat.css'\n  import firebase from \"firebase\"\n\n  export default {\n\tmethods:{\n\t\tasync fetchMessages({room, options={}}){\n\t\t\tthis.messages = []\n\t\t\tthis.messagesLoaded = false\n\t\t\tvar info = room.roomId\n\t\t\tthis.currentRoomId = info\n\t\t\tconsole.log(\"bullshit\")\n\t\t\t\n\t\t\tvar messages = firebase.firestore().collection(\"messages\").doc(this.currentRoomId).collection(\"messages\")\n\n\t\t\tmessages.where(\"senderId\", \"!=\", this.$store.state.user.id).where(\"seen\", \"==\", false).get().then((docSnapshot) => {\n\t\t\t\tconsole.log('outside loop')\n\t\t\t\tdocSnapshot.forEach((doc) => {\n\t\t\t\t\tconsole.log('inside loop')\n\t\t\t\t\tconsole.log(doc.data().seen)\n\t\t\t\t\tconsole.log(doc.data().username)\n\t\t\t\t\tconsole.log(doc.data().content)\n\t\t\t\t\tmessages.doc(doc.id).update({\n\t\t\t\t\t\tseen:true\n\t\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\t\n\t\t\tmessages.orderBy(\"timestamp\").get().then((docSnapshot) => {\n\t\t\t\tdocSnapshot.forEach((message) => {\n\t\t\t\tthis.messages.push(message.data())\n\n\t\t\t\tconsole.log(message.data().content)\n\t\t\t})\n\t\t\tthis.messagesLoaded = true\n\t\t\t})\n\t\t},\n\n\t\tasync sendMessage(roomId, content, files, replyMessage, usersTag){\n\t\t\t\t/*\n\t\t\t\t*/\n\n\t\t\t\tvar info = roomId\n\t\t\t\t\n\t\t\t\tvar messageTemplate =\n\t\t\t\t\t{\n\t\t\t\t\t_id: info.roomId,\n\t\t\t\t\tcontent: info.content,\n\t\t\t\t\tsenderId: this.$store.state.user.id,\n\t\t\t\t\tusername: this.$store.state.user.name,\n\t\t\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n\t\t\t\t\tsaved: true,\n\t\t\t\t\tdistributed: true,\n\t\t\t\t\tseen: false, \n\t\t\t\t\t}\n\n\t\t\t\tvar fileTemplate = \n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"Example\",\n\t\t\t\t\t\tsize: 0,\n\t\t\t\t\t\ttype: 'png',\n\t\t\t\t\t\taudio: false, \n\t\t\t\t\t\tduration: 0, \n\t\t\t\t\t\turl: 'ex.com',\n\t\t\t\t\t\tpreview: 'ex.com'\n\t\t\t\t\t}\t\n\n\n\t\t\t\tconsole.log(\"Your message is:\")\n\t\t\t\tif(replyMessage == null){\n\t\t\t\t\t\tvar request = await firebase.firestore().collection('messages').doc(info.roomId).collection('messages').doc().set(messageTemplate)\n\t\t\t\t\t\tthis.messages.push(messageTemplate)\n\t\t\t\t}else{\n\t\t\t\t\tvar replyTemplate = \n\t\t\t\t\t{\n\t\t\t\t\t\tcontent: replyMessage.content,\n\t\t\t\t\t\tsenderId: replyMessage.senderId,\n\t\t\t\t\t}\n\t\t\t\t\tif(replyMessage.files.length > 0){\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t},\n\tasync beforeMount(){\n\t\tconsole.log(this.$store.state.user.id)\n\t\tthis.currentUserId = this.$store.state.user.id\n\t\t\n\t\tvar chat_rooms = await firebase.firestore()\n\t\t.collection('chats')\n\t\t.where(\"users\", \"array-contains\", this.$store.state.user.id)\n\t\t.get()\n\t\t\n\t\tchat_rooms.forEach((doc) => {\n\t\t\tvar roomTemplate = \n\t\t\t\t\t{\n\t\t\t\t\troomId: null,\n\t\t\t\t\troomName: 'Room 1',\n\t\t\t\t\tlastMessage: {\n\t\t\t\t\tcontent: 'Last message received',\n\t\t\t\t\tsenderId: 1234,\n\t\t\t\t\tusername: 'John Doe',\n\t\t\t\t\ttimestamp: null,\n\t\t\t\t\t},\n\t\t\t\t\tusers: [\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 1234,\n\t\t\t\t\t\tusername: 'John Doe',\n\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\tstate: 'offline',\n\t\t\t\t\t\tlastChanged: 'today, 14:30'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 4321,\n\t\t\t\t\t\tusername: 'John Snow',\n\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\tstate: 'offline',\n\t\t\t\t\t\tlastChanged: '14 July, 20:00'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t]\n \t\t\t\t}\t\n\t\t\t\n\t\t\tfirebase.firestore().collection('messages').doc(doc.id)\n\t\t\t.collection('messages')\n\t\t\t.orderBy('timestamp', 'desc')\n\t\t\t.limit(1)\n\t\t\t.get().then((info) => {\n\t\t\t\tinfo.forEach((response) => {\n\t\t\t\troomTemplate.lastMessage.content = response.data().content\n\t\t\t\troomTemplate.lastMessage.senderId = response.data().senderId\n\t\t\t\troomTemplate.lastMessage.username = response.data().username\n\t\t\t\tvar wordlyTimestamp = response.data().timestamp\n\t\t\t\troomTemplate.lastMessage.timestamp = wordlyTimestamp\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tif(doc.data().firstUser.name === this.$store.state.user.name){\n\t\t\t\troomTemplate.roomId = doc.id\n\t\t\t\troomTemplate.timestamp = firebase.firestore.FieldValue.serverTimestamp()\n\t\t\t\troomTemplate.roomName = doc.data().secondUser.name\n\t\t\t\troomTemplate.users[0]._id = doc.data().secondUser.id\n\t\t\t\troomTemplate.users[0].username = doc.data().secondUser.name\n\t\t\t\tfirebase.firestore()\n\t\t\t\t.collection('users')\n\t\t\t\t.doc(doc.data().secondUser.id)\n\t\t\t\t.get().then((fire_state) => {\n\t\t\t\t\tif(fire_state.data().online == 'true'){\n\t\t\t\t\troomTemplate.users[0].status.state = 'online'\n\t\t\t\t\t}else{\n\t\t\t\t\troomTemplate.users[0].status.state = 'offline'\n\t\t\t\t\t}\n\t\t\t\t\troomTemplate.users[0].status.lastChanged = fire_state.data().lastChanged\n\t\t\t\t})\n\t\t\t\troomTemplate.username = doc.data().secondUser.name\n\t\t\t}\n\t\t\telse{\n\t\t\t\troomTemplate.roomId = doc.id\n\t\t\t\troomTemplate.timestamp = firebase.firestore.FieldValue.serverTimestamp()\n\t\t\t\troomTemplate.roomName = doc.data().firstUser.name\n\t\t\t\troomTemplate.users[1]._id = doc.data().firstUser.id \n\t\t\t\troomTemplate.users[1].username = doc.data().firstUser.name\n\t\t\t\tfirebase.firestore()\n\t\t\t\t.collection('users')\n\t\t\t\t.doc(doc.data().firstUser.id)\n\t\t\t\t.get().then((fire_state) => {\n\t\t\t\t\tif(fire_state.data().online == 'true'){\n\t\t\t\t\troomTemplate.users[1].status.state = 'online'\n\t\t\t\t\t}else{\n\t\t\t\t\troomTemplate.users[1].status.state = 'offline'\n\t\t\t\t\t}\n\t\t\t\t\troomTemplate.users[1].status.lastChanged = fire_state.data().lastChanged\n\t\t\t\t})\n\t\t\t\troomTemplate.username = doc.data().firstUser.name\n\t\t\t}\n\t\t\tthis.rooms.push(roomTemplate)\n\t\t})\n\n\t\tthis.roomsLoaded = true\n\t},\n\tcreated () {\n\n\t},\n    data: () => ({\n      cards: ['Today', 'Yesterday'],\n\t  roomsLoaded: false,\n\t  messagesLoaded: true,\n      drawer: null,\n      currentUserId: null,\n\t  currentRoomId: null,\n\t  height: '100%',\n\t  rooms: [],\n\t  messages:[],\n      links: [\n        ['mdi-inbox-arrow-down', 'Inbox'],\n        ['mdi-send', 'Send'],\n        ['mdi-delete', 'Trash'],\n        ['mdi-alert-octagon', 'Spam'],\n      ],\n    }),\n\tcomponents: {\n      ChatWindow\n    }\n  }\n\n</script>\n\n\n<!-- Rooms prop \nrooms=\"[\n  {\n    roomId: 1,\n    roomName: 'Room 1',\n    lastMessage: {\n      content: 'Last message received',\n      sender_id: 1234,\n      username: 'John Doe',\n      timestamp: '10:20',\n      date: 123242424,\n      seen: false,\n      new: true\n    },\n    users: [\n      {\n        _id: 1234,\n        username: 'John Doe',\n        status: {\n          state: 'online',\n          last_changed: 'today, 14:30'\n        }\n      },\n      {\n        _id: 4321,\n        username: 'John Snow',\n        status: {\n          state: 'offline',\n          last_changed: '14 July, 20:00'\n        }\n      }\n    ],\n    typingUsers: [ 4321 ]\n  }\n]\"\n-->"]}]}